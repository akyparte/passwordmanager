{"version":3,"sources":["passwordManager/index.tsx","App.tsx","index.tsx"],"names":["baseStyles","container","margin","fontFamily","borderRadius","padding","boxShadow","position","mainBody","border","width","minHeight","title","textAlign","marginBottom","marginTop","formContainer","display","flexDirection","alignItems","inputGroup","input","fontSize","outline","button","backgroundColor","color","cursor","toggleButton","themeToggleButton","top","right","errorMessage","listItem","listStyleType","passwordList","list","styles","lightContainer","darkContainer","lightMainBody","darkMainBody","inputLight","inputDark","passwordSection","SecurePasswordManager","encryptionKey","setEncryptionKey","useState","confirmKey","setConfirmKey","isUnlocked","setIsUnlocked","id","setId","password","setPassword","description","setDescription","passwords","setPasswords","keyError","setKeyError","theme","setTheme","useEffect","savedPasswords","localStorage","getItem","hashKey","JSON","parse","setItem","stringify","storedTheme","key","CryptoJS","SHA256","toString","validateKey","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChars","length","React","createElement","style","onClick","toggleTheme","prevTheme","htmlFor","type","placeholder","value","onChange","e","target","unlockPasswordManager","savePassword","encryptedId","AES","encrypt","encryptedPassword","encryptedDescription","newPasswords","alert","map","entry","index","togglePassword","idElement","document","getElementById","passElement","descriptionElement","textContent","decryptedId","decrypt","enc","Utf8","decryptedPassword","decryptedDescription","Error","error","App","className","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.505b37c6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst SecurePasswordManager: React.FC = () => {\r\n  const [encryptionKey, setEncryptionKey] = useState<string>(\"\");\r\n  const [confirmKey, setConfirmKey] = useState<string>(\"\");\r\n  const [isUnlocked, setIsUnlocked] = useState<boolean>(false);\r\n  const [id, setId] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [description, setDescription] = useState<string>(\"\");\r\n  const [passwords, setPasswords] = useState<{ id: string; password: string; description: string }[]>([]);\r\n  const [keyError, setKeyError] = useState<string>(\"\");\r\n  const [theme, setTheme] = useState<string>(\"light\");\r\n\r\n  useEffect(() => {\r\n    if (encryptionKey) {\r\n      const savedPasswords = localStorage.getItem(`passwords_${hashKey(encryptionKey)}`);\r\n      if (savedPasswords) {\r\n        setPasswords(JSON.parse(savedPasswords));\r\n      } else {\r\n        setPasswords([]);\r\n      }\r\n    }\r\n  }, [isUnlocked, encryptionKey]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked && encryptionKey) {\r\n      localStorage.setItem(`passwords_${hashKey(encryptionKey)}`, JSON.stringify(passwords));\r\n    }\r\n  }, [passwords, encryptionKey, isUnlocked]);\r\n\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem(\"theme\");\r\n    if (storedTheme) {\r\n      setTheme(storedTheme);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"theme\", theme);\r\n  }, [theme]);\r\n\r\n  const hashKey = (key: string) => CryptoJS.SHA256(key).toString();\r\n\r\n  const unlockPasswordManager = () => {\r\n    if (encryptionKey && confirmKey) {\r\n      if (validateKey(encryptionKey, confirmKey)) {\r\n        setIsUnlocked(true);\r\n        setKeyError(\"\");\r\n      } else {\r\n        setKeyError(\"Encryption key must be at least 8 characters long, contain uppercase, lowercase, number, and special character.\");\r\n      }\r\n    } else {\r\n      setKeyError(\"Please enter and confirm the encryption key.\");\r\n    }\r\n  };\r\n\r\n  const validateKey = (key: string, confirmKey: string) => {\r\n    const minLength = 8;\r\n    const hasUpperCase = /[A-Z]/.test(key);\r\n    const hasLowerCase = /[a-z]/.test(key);\r\n    const hasNumbers = /\\d/.test(key);\r\n    const hasSpecialChars = /[!@#$%^&*(),.?\":{}|<>]/.test(key);\r\n    return key.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars && key === confirmKey;\r\n  };\r\n\r\n  const savePassword = () => {\r\n    if (id && password && description && encryptionKey) {\r\n      const encryptedId = CryptoJS.AES.encrypt(id, encryptionKey).toString();\r\n      const encryptedPassword = CryptoJS.AES.encrypt(password, encryptionKey).toString();\r\n      const encryptedDescription = CryptoJS.AES.encrypt(description, encryptionKey).toString();\r\n\r\n      const newPasswords = [...passwords, { id: encryptedId, password: encryptedPassword, description: encryptedDescription }];\r\n      setPasswords(newPasswords);\r\n      setId(\"\");\r\n      setPassword(\"\");\r\n      setDescription(\"\");\r\n    } else {\r\n      alert(\"Please enter ID, password, and description.\");\r\n    }\r\n  };\r\n\r\n  const togglePassword = (index: number, encryptedId: string, encryptedPassword: string, encryptedDescription: string) => {\r\n    const idElement = document.getElementById(`id-${index}`);\r\n    const passElement = document.getElementById(`pass-${index}`);\r\n    const descriptionElement = document.getElementById(`desc-${index}`);\r\n\r\n    if (idElement?.textContent === \"********\" && passElement?.textContent === \"********\" && descriptionElement?.textContent === \"********\") {\r\n      try {\r\n        const decryptedId = CryptoJS.AES.decrypt(encryptedId, encryptionKey).toString(CryptoJS.enc.Utf8);\r\n        const decryptedPassword = CryptoJS.AES.decrypt(encryptedPassword, encryptionKey).toString(CryptoJS.enc.Utf8);\r\n        const decryptedDescription = CryptoJS.AES.decrypt(encryptedDescription, encryptionKey).toString(CryptoJS.enc.Utf8);\r\n\r\n        if (!decryptedId || !decryptedPassword || !decryptedDescription) throw new Error(\"Invalid Key\");\r\n\r\n        idElement.textContent = decryptedId;\r\n        passElement.textContent = decryptedPassword;\r\n        descriptionElement.textContent = decryptedDescription;\r\n      } catch (error) {\r\n        alert(\"Incorrect encryption key. Unable to decrypt.\");\r\n      }\r\n    } else {\r\n      idElement!.textContent = \"********\";\r\n      passElement!.textContent = \"********\";\r\n      descriptionElement!.textContent = \"********\";\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\r\n  };\r\n\r\n  return (\r\n    <div style={theme === \"light\" ? styles.lightMainBody : styles.darkMainBody} id=\"mainBody\">\r\n      <div style={theme === \"light\" ? styles.lightContainer : styles.darkContainer} id=\"container\">\r\n        <h2 style={styles.title}>Secure Password Manager</h2>\r\n\r\n        <button onClick={toggleTheme} style={styles.themeToggleButton}>\r\n          {theme === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\r\n        </button>\r\n\r\n        {!isUnlocked && (\r\n          <div style={styles.formContainer}>\r\n            <div style={styles.inputGroup}>\r\n              <label htmlFor=\"encryptionKey\" style={{ marginBottom: 4 }}>Enter Encryption Key:</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"encryptionKey\"\r\n                placeholder=\"Enter master password\"\r\n                value={encryptionKey}\r\n                onChange={(e) => setEncryptionKey(e.target.value)}\r\n                style={theme === \"light\" ? styles.inputLight : styles.inputDark}\r\n              />\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label htmlFor=\"confirmKey\" style={{ marginBottom: 4 }}>Confirm Encryption Key:</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"confirmKey\"\r\n                placeholder=\"Confirm master password\"\r\n                value={confirmKey}\r\n                onChange={(e) => setConfirmKey(e.target.value)}\r\n                style={theme === \"light\" ? styles.inputLight : styles.inputDark}\r\n              />\r\n            </div>\r\n            <button onClick={unlockPasswordManager} style={styles.button}>Unlock</button>\r\n            {keyError && <div style={styles.errorMessage}>{keyError}</div>}\r\n          </div>\r\n        )}\r\n\r\n        {isUnlocked && (\r\n          <div style={styles.passwordSection}>\r\n            <div style={styles.inputGroup}>\r\n              <label htmlFor=\"id\">ID:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"id\"\r\n                placeholder=\"Enter website or ID\"\r\n                value={id}\r\n                onChange={(e) => setId(e.target.value)}\r\n                style={theme === \"light\" ? styles.inputLight : styles.inputDark}\r\n              />\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label htmlFor=\"password\">Password:</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Enter your password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                style={theme === \"light\" ? styles.inputLight : styles.inputDark}\r\n              />\r\n            </div>\r\n            <div style={styles.inputGroup}>\r\n              <label htmlFor=\"description\">Description:</label>\r\n              <input\r\n                type=\"input\"\r\n                id=\"description\"\r\n                placeholder=\"Add description\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                style={theme === \"light\" ? styles.inputLight : styles.inputDark}\r\n              />\r\n            </div>\r\n            <button onClick={savePassword} style={styles.button}>Save Credentials</button>\r\n\r\n            <div style={styles.passwordList}>\r\n              <h3>Saved Passwords</h3>\r\n              <ul style={styles.list}>\r\n                {passwords.map((entry, index) => (\r\n                  <li key={index} style={styles.listItem}>\r\n                    ID: <span id={`id-${index}`}>********</span><br />\r\n                    Password: <span id={`pass-${index}`}>********</span><br />\r\n                    Description: <span id={`desc-${index}`}>********</span><br />\r\n                    <button onClick={() => togglePassword(index, entry.id, entry.password, entry.description)} style={styles.toggleButton}>\r\n                      Show/Hide Credentials\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Base styles remain unchanged...\r\n\r\n\r\n// Base styles common to both light and dark themes\r\nconst baseStyles: { [key: string]: React.CSSProperties } = {\r\n  container: {\r\n    margin: \"20px\",\r\n    fontFamily: \"'Arial', sans-serif\",\r\n    borderRadius: \"8px\",\r\n    padding: \"20px\",\r\n    boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\r\n    // border: '2px solid black',\r\n    position: \"relative\",\r\n\r\n  },\r\n  mainBody: {\r\n    border: '0.1px solid black',\r\n      width: '100%',\r\n      minHeight: '100vh',\r\n      // position: 'relative',\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    marginBottom: '20px',\r\n    marginTop: '35px'\r\n  },\r\n  formContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  inputGroup: {\r\n    marginBottom: \"15px\",\r\n    width: \"100%\",\r\n  },\r\n  input: {\r\n    padding: \"10px\",\r\n    width: \"100%\",\r\n    borderRadius: \"4px\",\r\n    border: \"1px solid #ccc\",\r\n    fontSize: \"16px\",\r\n    outline: \"none\",\r\n  },\r\n  button: {\r\n    padding: \"10px 15px\",\r\n    backgroundColor: \"#007bff\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"16px\",\r\n  },\r\n  toggleButton: {\r\n    marginTop: \"10px\",\r\n    padding: \"5px 10px\",\r\n    backgroundColor: \"#28a745\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"14px\",\r\n    // position: \"absolute\",\r\n  },\r\n  themeToggleButton: {\r\n    position: \"absolute\",\r\n    top: \"20px\",\r\n    right: \"20px\",\r\n    padding: \"10px\",\r\n    border: \"none\",\r\n    backgroundColor: \"#007bff\",\r\n    color: \"#fff\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  errorMessage: {\r\n    color: \"red\",\r\n    fontSize: \"14px\",\r\n    marginTop: \"10px\",\r\n    textAlign: \"center\",\r\n  },\r\n  // listItem: {\r\n  //   border: \"1px solid #ccc\",\r\n  //   padding: '6px'\r\n  // },\r\n\r\n  listItem: {\r\n    padding: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    marginBottom: \"5px\",\r\n    borderRadius: \"4px\",\r\n    listStyleType: \"none\"\r\n  },\r\n  passwordList: {\r\n    marginTop: \"20px\",\r\n  },\r\n\r\n  list: {\r\n    listStyleType: \"none\",\r\n    marginBottom:3,\r\n  },\r\n};\r\n\r\n// Light and dark theme specific styles\r\nconst styles = {\r\n  lightContainer: {\r\n    ...baseStyles.container,\r\n    backgroundColor: \"#fff\",\r\n    color: \"#000\",\r\n  },\r\n  darkContainer: {\r\n    ...baseStyles.container,\r\n    backgroundColor: \"#333\",\r\n    color: \"#fff\",\r\n  },\r\n  lightMainBody: {\r\n    ...baseStyles.mainBody,\r\n    backgroundColor: \"#fff\",\r\n\r\n  },\r\n  darkMainBody: {\r\n    ...baseStyles.mainBody,\r\n    backgroundColor: \"#121212\",\r\n      \r\n  },\r\n  title: baseStyles.title,\r\n  formContainer: baseStyles.formContainer,\r\n  inputGroup: baseStyles.inputGroup,\r\n  inputLight: {\r\n    ...baseStyles.input,\r\n    backgroundColor: '#fff',\r\n  },\r\n  inputDark: {\r\n    ...baseStyles.input,\r\n    backgroundColor: '#D3D3D3',\r\n  },\r\n  themeToggleButton: baseStyles.themeToggleButton,\r\n  button: baseStyles.button,\r\n  toggleButton: baseStyles.toggleButton,\r\n  errorMessage: baseStyles.errorMessage, \r\n  passwordSection: baseStyles.passwordSection,\r\n  passwordList: baseStyles.passwordList,\r\n  list: baseStyles.list,\r\n  listItem: baseStyles.listItem,\r\n};\r\n\r\n\r\n\r\n\r\nexport default SecurePasswordManager;\r\n","import React from 'react';\nimport SecurePasswordManager from './passwordManager';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <SecurePasswordManager></SecurePasswordManager>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}